<<<<<<< Updated upstream
test_coldata_df
View(test_coldata_df)
# Create new metadata table with only samples from the follow-up timepoint (age 2 or 4)
follow_up_coldata <- filter(test_coldata_df, age %in% c("2", "4"))
# filter(df, state %in% c("CA", "NY",'DE'))
# Of the follow-up timepoint data, separate into activated and unactivated
follow_up_act_coldata <- filter(follow_up_coldata, activation_status == "1")
# Get sample names of samples at the follow-up timepoint
# sample_label_follow_up <- row.names(follow_up_coldata)
sample_label_follow_up_act <- row.names(follow_up_act_coldata)
# Create new dataframe with only data samples from the follow-up timepoint (age 2 or 4)
# follow_up_countData <- countData[,c("GeneID", sample_label_follow_up)]
follow_up_act_countData <- countData[,c("GeneID", sample_label_follow_up_act)]
View(follow_up_act_countData)
# Load matrix containing genes that were identified as differentially expressed between allergics and controls at baseline timepoint by the authors
deg_allerg_vs_ctrl <- read.csv('..\\..\\data\\raw\\supp_data_3_dge_activ_allerg_vs_ctrl_baseline.xlsx', header = TRUE, sep = ",")
# Filter genes based on genes that were identified as differentially expressed between allergics and controls at baseline timepoint
# follow_up_act_countData_filt_genes <-
View(deg_allerg_vs_ctrl)
# Load matrix containing genes that were identified as differentially expressed between allergics and controls at baseline timepoint by the authors
deg_allerg_vs_ctrl <- read.csv('..\\..\\data\\raw\\supp_data_3_dge_activ_allerg_vs_ctrl_baseline.csv', header = TRUE, sep = ",")
# Filter genes based on genes that were identified as differentially expressed between allergics and controls at baseline timepoint
# follow_up_act_countData_filt_genes <-
# Load matrix containing genes that were identified as differentially expressed between allergics and controls at baseline timepoint by the authors
deg_allerg_vs_ctrl <- read.csv('..\\..\\data\\raw\\supp_data_3_dge_activ_allerg_vs_ctrl_baseline.csv', header = TRUE, sep = ",")
# Get GeneID of differentially expressed genes
geneid_deg_allerg_vs_ctrl <- deg_allerg_vs_ctrl[,2:-1]
# Load matrix containing genes that were identified as differentially expressed between allergics and controls at baseline timepoint by the authors
deg_allerg_vs_ctrl <- read.csv('..\\..\\data\\raw\\supp_data_3_dge_activ_allerg_vs_ctrl_baseline.csv', header = TRUE, sep = ",")
# Get GeneID of differentially expressed genes
geneid_deg_allerg_vs_ctrl <- deg_allerg_vs_ctrl[,2:1413]
# Load matrix containing genes that were identified as differentially expressed between allergics and controls at baseline timepoint by the authors
deg_allerg_vs_ctrl <- read.csv('..\\..\\data\\raw\\supp_data_3_dge_activ_allerg_vs_ctrl_baseline.csv', header = TRUE, sep = ",")
# Get GeneID of differentially expressed genes
geneid_deg_allerg_vs_ctrl <- deg_allerg_vs_ctrl[2,2:1413]
# Load matrix containing genes that were identified as differentially expressed between allergics and controls at baseline timepoint by the authors
deg_allerg_vs_ctrl <- read.csv('..\\..\\data\\raw\\supp_data_3_dge_activ_allerg_vs_ctrl_baseline.csv', header = TRUE, sep = ",")
# Get GeneID of differentially expressed genes
geneid_deg_allerg_vs_ctrl <- deg_allerg_vs_ctrl[2, 2:1413]
# Load matrix containing genes that were identified as differentially expressed between allergics and controls at baseline timepoint by the authors
deg_allerg_vs_ctrl <- read.csv('..\\..\\data\\raw\\supp_data_3_dge_activ_allerg_vs_ctrl_baseline.csv', header = TRUE, sep = ",")
# Get GeneID of differentially expressed genes
geneid_deg_allerg_vs_ctrl <- deg_allerg_vs_ctrl[2:1413, 2]
# Filter genes based on genes that were identified as differentially expressed between allergics and controls at baseline timepoint
# follow_up_act_countData_filt_genes <-
geneid_deg_allerg_vs_ctrl
# Load matrix containing genes that were identified as differentially expressed between allergics and controls at baseline timepoint by the authors
deg_allerg_vs_ctrl <- read.csv('..\\..\\data\\raw\\supp_data_3_dge_activ_allerg_vs_ctrl_baseline.csv', header = TRUE, sep = ",")
# Get GeneID of differentially expressed genes
geneid_deg_allerg_vs_ctrl <- deg_allerg_vs_ctrl[2:1413, 2]
# Filter genes based on genes that were identified as differentially expressed between allergics and controls at baseline timepoint
follow_up_act_countData_filt_genes <- follow_up_act_countData[geneid_deg_allerg_vs_ctrl,]
View(follow_up_act_countData_filt_genes)
# Load matrix containing genes that were identified as differentially expressed between allergics and controls at baseline timepoint by the authors
deg_allerg_vs_ctrl <- read.csv('..\\..\\data\\raw\\supp_data_3_dge_activ_allerg_vs_ctrl_baseline.csv', header = TRUE, sep = ",")
# Get GeneID of differentially expressed genes
geneid_deg_allerg_vs_ctrl <- deg_allerg_vs_ctrl[2:1413, 2]
# Filter genes based on genes that were identified as differentially expressed between allergics and controls at baseline timepoint
follow_up_act_countData_filt_genes <- filter(follow_up_act_countData, GeneID == geneid_deg_allerg_vs_ctrl)
# Load matrix containing genes that were identified as differentially expressed between allergics and controls at baseline timepoint by the authors
deg_allerg_vs_ctrl <- read.csv('..\\..\\data\\raw\\supp_data_3_dge_activ_allerg_vs_ctrl_baseline.csv', header = TRUE, sep = ",")
# Get GeneID of differentially expressed genes
geneid_deg_allerg_vs_ctrl <- deg_allerg_vs_ctrl[2:1413, 2]
# Filter genes based on genes that were identified as differentially expressed between allergics and controls at baseline timepoint
follow_up_act_countData_filt_genes <- filter(follow_up_act_countData, GeneID %in% geneid_deg_allerg_vs_ctrl)
#
# filter(my_first_df,
#                        SampleID %in% sample_ids$SampleID)
View(coldata_transpose_2)
geneid_deg_allerg_vs_ctrl
View(follow_up_act_coldata)
dds <- DESeqDataSetFromMatrix(countData=follow_up_act_countData_filt_genes,
colData=follow_up_act_coldata,
design=~allergy_status, tidy = TRUE)
dds
dds <- DESeq(dds)
# Look at results table
res <- results(dds)
head(results(dds, tidy=TRUE))
# Summary of results
summary(res) #summary of results
# Sort summary list by p-value
res <- res[order(res$padj),]
head(res)
# How many adjusted p-values are less than 0.1 (the default alpha)
sum(res$padj < 0.1, na.rm=TRUE)
# How many p-values are less than 0.05
sum(res$pvalue < 0.05, na.rm=TRUE)
#we can use plotCounts fxn to compare the normalized counts
#between treated and control groups for our top 6 genes
par(mfrow=c(2,3))
plotCounts(dds, gene="9341", intgroup="allergy_status")
plotCounts(dds, gene="6518", intgroup="allergy_status")
plotCounts(dds, gene="26232", intgroup="allergy_status")
plotCounts(dds, gene="7799", intgroup="allergy_status")
plotCounts(dds, gene="23352", intgroup="allergy_status")
plotCounts(dds, gene="3925", intgroup="allergy_status")
#reset par
par(mfrow=c(1,1))
# Make a basic volcano plot
with(res, plot(log2FoldChange, -log10(pvalue), pch=20, main="Volcano plot", xlim=c(-3,3)))
# Add colored points: blue if padj<0.01, red if log2FC>1 and padj<0.05)
with(subset(res, padj<.01 ), points(log2FoldChange, -log10(pvalue), pch=20, col="blue"))
with(subset(res, padj<.01 & abs(log2FoldChange)>2), points(log2FoldChange, -log10(pvalue), pch=20, col="red"))
#First we need to transform the raw count data
#vst function will perform variance stabilizing transformation
vsdata <- vst(dds, blind=FALSE)
plotPCA(vsdata, intgroup="allergy_status") # use the DESEQ2 plotPCA fxn
=======
class(res$GeneID)
class(res$GeneID)
annots <- AnnotationDbi::select(
org.Hs.eg.db, key=res$GeneID,
columns=c("SYMBOL","GENENAME"), keytype="ENTREZID"
)
annots
View(annots)
# Map Entrez gene IDs to gene symbols
id_to_symbol <- AnnotationDbi::select(
org.Hs.eg.db, key=res$GeneID,
columns=c("SYMBOL","GENENAME"), keytype="ENTREZID"
)
id_to_symbol
# Join gene symbol with results table
res_symb <- inner_join(res, id_to_symbol, by=c("GeneID"="ENTREZID"))
res_symb
View(res_symb)
# Join gene symbol with results table
res_symb <- inner_join(res, id_to_symbol, by=c("GeneID"="ENTREZID"))
res_symb
res_symb_test <- inner_join(res, id_to_symbol)
# Join gene symbol with results table
res_symb <- inner_join(res, id_to_symbol, by=c("GeneID"="ENTREZID"))
res_symb
res_symb_test <- inner_join(res, id_to_symbol)
# Join gene symbol with results table
res_symb <- inner_join(res, id_to_symbol, by=c("GeneID"="ENTREZID"))
res_symb
# Create table with just gene symbol and log2fold change to use for GSEA
res_simp <- res_symb %>%
dplyr::select(SYMBOL, log2FoldChange) %>%
na.omit() %>%
distinct() %>%
group_by(SYMBOL) %>%
res_simp
# Create table with just gene symbol and log2fold change to use for GSEA
res_simp <- res_symb %>%
dplyr::select(SYMBOL, log2FoldChange) %>%
na.omit() %>%
distinct() %>%
group_by(SYMBOL) %>%
# res_simp
# Create table with just gene symbol and log2fold change to use for GSEA
res_simp <- res_symb %>%
dplyr::select(SYMBOL, log2FoldChange) %>%
na.omit() %>%
distinct() %>%
group_by(SYMBOL)
# res_simp
>>>>>>> Stashed changes
View(res)
View(res_simp)
# Create table with just gene symbol and log2fold change to use for GSEA
res_simp <- res_symb %>%
dplyr::select(SYMBOL, log2FoldChange) %>%
na.omit() %>%
distinct() %>%
group_by(SYMBOL)
res_simp
library(fgsea)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("fgsea")
library(fgsea)
# Create named vector of gene-level statistics
ranks <- deframe(res_simp)
head(ranks, 20)
# Load the pathways into a named list
pathways.food_allergy <- gmtPathways("..\\..\\gsea\\gene_sets\\HP_FOOD_ALLERGY.v2023.1.Hs.gmt")
# Look at them all if you want (uncomment)
pathways.food_allergy
# Show the first few pathways, and within those, show only the first few genes.
pathways.food_allergy %>%
head() %>%
lapply(head)
fgseaRes <- fgsea(pathways=pathways.food_allergy, stats=ranks, nperm=1000)
fgseaResTidy <- fgseaRes %>%
as_tibble() %>%
arrange(desc(NES))
# Show in a nice table:
fgseaResTidy %>%
dplyr::select(-leadingEdge, -ES, -nMoreExtreme) %>%
arrange(padj) %>%
DT::datatable()
install.packages('DT')
fgseaResTidy <- fgseaRes %>%
as_tibble() %>%
arrange(desc(NES))
# Show in a nice table:
fgseaResTidy %>%
dplyr::select(-leadingEdge, -ES, -nMoreExtreme) %>%
arrange(padj) %>%
DT::datatable()
ggplot(fgseaResTidy, aes(reorder(pathway, NES), NES)) +
geom_col(aes(fill=padj<0.05)) +
coord_flip() +
labs(x="Pathway", y="Normalized Enrichment Score",
title="Hallmark pathways NES from GSEA") +
theme_minimal()
plotEnrichment(pathways[["HP_FOOD_ALLERGY"]],
ranks)
plotEnrichment(pathways.food_allergy[["HP_FOOD_ALLERGY"]],
ranks)
library(tidyverse)
res <- read_csv("..\\..\\data\\results\\differential_gene_expression\\activ_pers_vs_resolved_baseline_genomewide.csv")
res
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("org.Hs.eg.db")
# Convert GeneID column values from numeric to character
res$GeneID <- as.character(res$GeneID)
# Map Entrez gene IDs to gene symbols
id_to_symbol <- AnnotationDbi::select(
org.Hs.eg.db, key=res$GeneID,
columns=c("SYMBOL","GENENAME"), keytype="ENTREZID"
)
<<<<<<< Updated upstream
test_coldata_df
# Create new metadata table with only samples from the follow-up timepoint (age 2 or 4)
follow_up_coldata <- filter(test_coldata_df, age %in% c("2", "4"))
# filter(df, state %in% c("CA", "NY",'DE'))
# Of the follow-up timepoint data, separate into activated and unactivated
follow_up_act_coldata <- filter(follow_up_coldata, activation_status == "1")
# Get sample names of samples at the follow-up timepoint
# sample_label_follow_up <- row.names(follow_up_coldata)
sample_label_follow_up_act <- row.names(follow_up_act_coldata)
# Create new dataframe with only data samples from the follow-up timepoint (age 2 or 4)
# follow_up_countData <- countData[,c("GeneID", sample_label_follow_up)]
follow_up_act_countData <- countData[,c("GeneID", sample_label_follow_up_act)]
dds <- DESeqDataSetFromMatrix(countData=follow_up_act_countData,
colData=follow_up_act_coldata,
design=~allergy_status, tidy = TRUE)
dds
dds <- DESeq(dds)
# Look at results table
res <- results(dds)
head(results(dds, tidy=TRUE))
# Summary of results
summary(res) #summary of results
# Sort summary list by p-value
res <- res[order(res$padj),]
head(res)
# How many adjusted p-values are less than 0.1 (the default alpha)
sum(res$padj < 0.1, na.rm=TRUE)
# How many p-values are less than 0.05
sum(res$pvalue < 0.05, na.rm=TRUE)
#we can use plotCounts fxn to compare the normalized counts
#between treated and control groups for our top 6 genes
par(mfrow=c(2,3))
plotCounts(dds, gene="7476", intgroup="allergy_status")
plotCounts(dds, gene="10235", intgroup="allergy_status")
plotCounts(dds, gene="105374981", intgroup="allergy_status")
plotCounts(dds, gene="348", intgroup="allergy_status")
plotCounts(dds, gene="255928", intgroup="allergy_status")
plotCounts(dds, gene="222545", intgroup="allergy_status")
#reset par
par(mfrow=c(1,1))
# Make a basic volcano plot
with(res, plot(log2FoldChange, -log10(pvalue), pch=20, main="Volcano plot", xlim=c(-4,4)))
# Add colored points: blue if padj<0.01, red if log2FC>1 and padj<0.05)
with(subset(res, padj<.01 ), points(log2FoldChange, -log10(pvalue), pch=20, col="blue"))
with(subset(res, padj<.01 & abs(log2FoldChange)>2), points(log2FoldChange, -log10(pvalue), pch=20, col="red"))
#First we need to transform the raw count data
#vst function will perform variance stabilizing transformation
vsdata <- vst(dds, blind=FALSE)
plotPCA(vsdata, intgroup="allergy_status") # use the DESEQ2 plotPCA fxn
#reset par
par(mfrow=c(1,1))
# Make a basic volcano plot
with(res, plot(log2FoldChange, -log10(pvalue), pch=20, main="Volcano plot", xlim=c(-8,4)))
# Add colored points: blue if padj<0.01, red if log2FC>1 and padj<0.05)
with(subset(res, padj<.01 ), points(log2FoldChange, -log10(pvalue), pch=20, col="blue"))
with(subset(res, padj<.01 & abs(log2FoldChange)>2), points(log2FoldChange, -log10(pvalue), pch=20, col="red"))
#reset par
par(mfrow=c(1,1))
# Make a basic volcano plot
with(res, plot(log2FoldChange, -log10(pvalue), pch=20, main="Volcano plot", xlim=c(-8,6)))
# Add colored points: blue if padj<0.01, red if log2FC>1 and padj<0.05)
with(subset(res, padj<.01 ), points(log2FoldChange, -log10(pvalue), pch=20, col="blue"))
with(subset(res, padj<.01 & abs(log2FoldChange)>2), points(log2FoldChange, -log10(pvalue), pch=20, col="red"))
#reset par
par(mfrow=c(1,1))
# Make a basic volcano plot
with(res, plot(log2FoldChange, -log10(pvalue), pch=20, main="Volcano plot", xlim=c(-8,6), yljim=c(0,10)))
# Add colored points: blue if padj<0.01, red if log2FC>1 and padj<0.05)
with(subset(res, padj<.01 ), points(log2FoldChange, -log10(pvalue), pch=20, col="blue"))
with(subset(res, padj<.01 & abs(log2FoldChange)>2), points(log2FoldChange, -log10(pvalue), pch=20, col="red"))
#reset par
par(mfrow=c(1,1))
# Make a basic volcano plot
with(res, plot(log2FoldChange, -log10(pvalue), pch=20, main="Volcano plot", xlim=c(-8,6), ylim=c(0,10)))
# Add colored points: blue if padj<0.01, red if log2FC>1 and padj<0.05)
with(subset(res, padj<.01 ), points(log2FoldChange, -log10(pvalue), pch=20, col="blue"))
with(subset(res, padj<.01 & abs(log2FoldChange)>2), points(log2FoldChange, -log10(pvalue), pch=20, col="red"))
#reset par
par(mfrow=c(1,1))
# Make a basic volcano plot
with(res, plot(log2FoldChange, -log10(pvalue), pch=20, main="Volcano plot", xlim=c(-8,6))
# Add colored points: blue if padj<0.01, red if log2FC>1 and padj<0.05)
with(subset(res, padj<.01 ), points(log2FoldChange, -log10(pvalue), pch=20, col="blue"))
#reset par
par(mfrow=c(1,1))
# Make a basic volcano plot
with(res, plot(log2FoldChange, -log10(pvalue), pch=20, main="Volcano plot", xlim=c(-8,6))
# Add colored points: blue if padj<0.01, red if log2FC>1 and padj<0.05)
with(subset(res, padj<.01 ), points(log2FoldChange, -log10(pvalue), pch=20, col="blue"))
#reset par
par(mfrow=c(1,1))
# Make a basic volcano plot
with(res, plot(log2FoldChange, -log10(pvalue), pch=20, main="Volcano plot", xlim=c(-8,6)))
# Add colored points: blue if padj<0.01, red if log2FC>1 and padj<0.05)
with(subset(res, padj<.01 ), points(log2FoldChange, -log10(pvalue), pch=20, col="blue"))
with(subset(res, padj<.01 & abs(log2FoldChange)>2), points(log2FoldChange, -log10(pvalue), pch=20, col="red"))
library(methylKit)
install.packages("methylKit")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("methylKit")
library(methylKit)
# Read in methylation data
#meth_data <- read.metharray.exp("path/to/methylation/file")
# Find genomic location of cg20995327 site
#cg_loc <- which(row.names(meth_data) == "cg20995327")
cg_loc = cg20995327
library(methylKit)
# Read in methylation data
#meth_data <- read.metharray.exp("path/to/methylation/file")
# Find genomic location of cg20995327 site
#cg_loc <- which(row.names(meth_data) == "cg20995327")
cg_loc = cg20995327
library(methylKit)
# Read in methylation data
#meth_data <- read.metharray.exp("path/to/methylation/file")
# Find genomic location of cg20995327 site
#cg_loc <- which(row.names(meth_data) == "cg20995327")
cg_loc = "cg20995327"
# Map site to genomic location
chr <- getSeqnames(meth_data)[cg_loc]
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("methylKit")
install.packages("biomaRt")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("biomaRt")
library(methylKit)
# Read in methylation data
#meth_data <- read.metharray.exp("path/to/methylation/file")
# Find genomic location of cg20995327 site
#cg_loc <- which(row.names(meth_data) == "cg20995327")
cg_loc = "cg20995327"
# Map site to genomic location
chr <- getSeqnames(meth_data)[cg_loc]
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("GenomicRanges")
library(methylKit)
library(GenomicRanges)
# Read in methylation data
meth_data <- read.metharray.exp("path/to/methylation/file")
library(methylKit)
library(GenomicRanges)
# Read in methylation data
#meth_data <- read.metharray.exp("path/to/methylation/file")
# Find genomic location of cg20995327 site
#cg_loc <- which(row.names(meth_data) == "cg20995327")
cg_loc <- "cg20995327"
# Map site to genomic location
chr <- as.character(getSeqnames(as(meth_data, "GRanges"))[cg_loc])
library(methylKit)
library(biomaRt)
# Read in methylation data
meth_data <- read.metharray.exp("path/to/methylation/file")
library(methylKit)
library(biomaRt)
# Read in methylation data
#meth_data <- read.metharray.exp("path/to/methylation/file")
# Find genomic location of cg20995327 site
#cg_loc <- which(row.names(meth_data) == "cg20995327")
cg_loc <- "cg20995327"
# Map site to genomic location
chr <- paste0("chr", meth_data$chr[cg_loc])
library(methylKit)
library(biomaRt)
# Read in methylation data
#meth_data <- read.metharray.exp("path/to/methylation/file")
meth_data <- data.frame(c("cg20995327"))
# Find genomic location of cg20995327 site
#cg_loc <- which(row.names(meth_data) == "cg20995327")
cg_loc <- "cg20995327"
# Map site to genomic location
chr <- paste0("chr", meth_data$chr[cg_loc])
pos <- meth_data$start[cg_loc]
# Use biomaRt package to retrieve gene annotation
ensembl <- useMart("ensembl", dataset = "hsapiens_gene_ensembl")
genes <- getBM(attributes = c("ensembl_gene_id", "hgnc_symbol"),
filters = c("chromosome_name", "start", "end"),
values = list(chr, pos, pos),
mart = ensembl)
library(methylKit)
library(biomaRt)
# Read in methylation data
#meth_data <- read.metharray.exp("path/to/methylation/file")
meth_data <- data.frame(c("cg20995327"))
meth_data$chr = c("Chr12")
meth_data$pos = c(12,595,583)
library(methylKit)
library(biomaRt)
# Read in methylation data
#meth_data <- read.metharray.exp("path/to/methylation/file")
meth_data <- data.frame(c("cg20995327"))
meth_data$chr = c("Chr12")
meth_data$pos = c(12595583)
# Find genomic location of cg20995327 site
#cg_loc <- which(row.names(meth_data) == "cg20995327")
cg_loc <- "cg20995327"
# Map site to genomic location
chr <- paste0("chr", meth_data$chr[cg_loc])
pos <- meth_data$start[cg_loc]
# Use biomaRt package to retrieve gene annotation
ensembl <- useMart("ensembl", dataset = "hsapiens_gene_ensembl")
genes <- getBM(attributes = c("ensembl_gene_id", "hgnc_symbol"),
filters = c("chromosome_name", "start", "end"),
values = list(chr, pos, pos),
mart = ensembl)
View(meth_data)
library(methylKit)
library(biomaRt)
# Create example methylation data frame
meth_data <- data.frame(
chr = c("1", "2", "3", "4"),
start = c(100, 200, 300, 400),
cg20995327 = c(0.2, 0.4, 0.6, 0.8),
cg12345678 = c(0.1, 0.3, 0.5, 0.7)
)
row.names(meth_data) <- paste0("cg", c("20995327", "12345678"), "_", 1:4)
# Find genomic location of cg20995327 site
cg_loc <- which(row.names(meth_data) == "cg20995327_1")
# Map site to genomic location
chr <- paste0("chr", meth_data$chr[cg_loc])
pos <- meth_data$start[cg_loc]
# Use biomaRt package to retrieve gene annotation
ensembl <- useMart("ensembl", dataset = "hsapiens_gene_ensembl")
genes <- getBM(attributes = c("ensembl_gene_id", "hgnc_symbol"),
filters = c("chromosome_name", "start", "end"),
values = list(chr, pos, pos),
mart = ensembl)
# Get gene symbol associated with cg20995327
gene_symbol <- genes$hgnc_symbol[1]
library(methylKit)
library(biomaRt)
# Create example methylation data frame
meth_data <- data.frame(
chr = c("1", "2", "3", "4"),
start = c(100, 200, 300, 400),
cg20995327 = c(0.2, 0.4, 0.6, 0.8),
cg12345678 = c(0.1, 0.3, 0.5, 0.7)
)
row.names(meth_data) <- paste0("cg", c("20995327", "12345678"), "_", 1:4)
# Find genomic location of cg20995327 site
cg_loc <- which(row.names(meth_data) == "cg20995327_1")
# Map site to genomic location
chr <- paste0("chr", meth_data$chr[cg_loc])
pos <- meth_data$start[cg_loc]
# Use biomaRt package to retrieve gene annotation
ensembl <- useMart("ensembl", dataset = "hsapiens_gene_ensembl")
genes <- getBM(attributes = c("ensembl_gene_id", "hgnc_symbol"),
filters = c("chromosome_name", "start", "end"),
values = list(chr, pos, pos),
mart = ensembl)
# Get gene symbol associated with cg20995327
gene_symbol <- genes$hgnc_symbol[1]
library(methylKit)
library(biomaRt)
# Create example methylation data frame
meth_data <- data.frame(
chr = c("12", "2", "3", "4"),
start = c(12595583, 200, 300, 400),
cg20995327 = c(0.2, 0.4, 0.6, 0.8),
cg12345678 = c(0.1, 0.3, 0.5, 0.7)
)
row.names(meth_data) <- paste0("cg", c("20995327", "12345678"), "_", 1:4)
# Find genomic location of cg20995327 site
cg_loc <- which(row.names(meth_data) == "cg20995327_1")
# Map site to genomic location
chr <- paste0("chr", meth_data$chr[cg_loc])
pos <- meth_data$start[cg_loc]
# Use biomaRt package to retrieve gene annotation
ensembl <- useMart("ensembl", dataset = "hsapiens_gene_ensembl")
genes <- getBM(attributes = c("ensembl_gene_id", "hgnc_symbol"),
filters = c("chromosome_name", "start", "end"),
values = list(chr, pos, pos),
mart = ensembl)
# Get gene symbol associated with cg20995327
gene_symbol <- genes$hgnc_symbol[1]
View(meth_data)
load_csv("C:\\GSE114134_series_matrix")
read.table("C:\\GSE114134_series_matrix.txt")
read.table("C:\\GSE114134_series_matrix.txt", sep="/t")
read.table("C:\\GSE114134_series_matrix.txt", sep=" ")
install.packages("minfi")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("minfi")
library(minfi)
# Load annotation data for the EPIC array
data("IlluminaHumanMethylationEPICanno.ilm10b4.hg19")
# Find annotation for cg20995327
cg_name <- "cg20995327"
anno <- getAnnotation(IlluminaHumanMethylationEPICanno.ilm10b4.hg19, target = cg_name)
library(minfi)
# Load annotation data for the EPIC array
data(IlluminaHumanMethylationEPICanno.ilm10b4.hg19)
# Convert probe ID to nuID
probe_id <- "cg20995327"
nuID <- probeid2nuID(IlluminaHumanMethylationEPICanno.ilm10b4.hg19, probe_id)
library(IlluminaHumanMethylationEPICmanifest)
install.packages("IlluminaHumanMethylationEPICmanifest")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("IlluminaHumanMethylationEPICmanifest")
library(IlluminaHumanMethylationEPICmanifest)
library(minfi)
# Load annotation data for the EPIC array
data(IlluminaHumanMethylationEPICanno.ilm10b4.hg19)
# Convert probe ID to nuID
probe_id <- "cg20995327"
nuID <- probeid2nuID(IlluminaHumanMethylationEPICmanifest::getManifest("HumanMethylationEPIC"), probe_id)
library(minfi)
# Load annotation data for the EPIC array
anno <- read.csv("https://support.illumina.com/content/dam/illumina-support/documents/downloads/productfiles/humanmethylationepicanno.csv")
# Load the biomaRt package
library(biomaRt)
# Connect to the Ensembl database and select the appropriate dataset
ensembl = useMart("ensembl", dataset = "hsapiens_gene_ensembl")
# Define the transcript accession number
transcript_id = "ENST00000370334.4"
# Get the gene ID corresponding to the transcript
transcript_to_gene = getBM(attributes = c("ensembl_transcript_id", "ensembl_gene_id"),
filters = "ensembl_transcript_id",
values = transcript_id,
mart = ensembl)
# Extract the gene ID from the output
gene_id = transcript_to_gene$ensembl_gene_id[1]
# Print the gene ID
cat("The gene ID corresponding to transcript", transcript_id, "is", gene_id, "\n")
# Load the biomaRt package
library(biomaRt)
# Connect to the Ensembl database and select the appropriate dataset
ensembl = useMart("ensembl", dataset = "hsapiens_gene_ensembl")
# Define the transcript accession number
transcript_id = "ENST00000384106.1"
# Get the gene ID corresponding to the transcript
transcript_to_gene = getBM(attributes = c("ensembl_transcript_id", "ensembl_gene_id"),
filters = "ensembl_transcript_id",
values = transcript_id,
mart = ensembl)
# Extract the gene ID from the output
gene_id = transcript_to_gene$ensembl_gene_id[1]
# Print the gene ID
cat("The gene ID corresponding to transcript", transcript_id, "is", gene_id, "\n")
=======
id_to_symbol
# Join gene symbol with results table
res_symb <- inner_join(res, id_to_symbol, by=c("GeneID"="ENTREZID"))
res_symb
# Create table with just gene symbol and log2fold change to use for GSEA
res_simp <- res_symb %>%
dplyr::select(SYMBOL, log2FoldChange) %>%
na.omit() %>%
distinct() %>%
group_by(SYMBOL)
res_simp
# Install fgsea package
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("fgsea")
knitr::opts_chunk$set(echo = TRUE)
# Load the pathways into a named list
pathways.allergy <- gmtPathways("..\\..\\gsea\\gene_sets\\HP_ALLERGY.v2023.1.Hs.gmt")
# Look at them all if you want (uncomment)
pathways.allergy
# Show the first few pathways, and within those, show only the first few genes.
pathways.allergy %>%
head() %>%
lapply(head)
fgseaRes <- fgsea(pathways=pathways.food_allergy, stats=ranks, nperm=1000)
fgseaResTidy <- fgseaRes %>%
as_tibble() %>%
arrange(desc(NES))
# Show in a nice table:
fgseaResTidy %>%
dplyr::select(-leadingEdge, -ES, -nMoreExtreme) %>%
arrange(padj) %>%
DT::datatable()
fgseaResTidy <- fgseaRes %>%
as_tibble() %>%
arrange(desc(NES))
# Show in a nice table:
fgseaResTidy %>%
dplyr::select(-leadingEdge, -ES, -nMoreExtreme) %>%
arrange(padj) %>%
DT::datatable()
ggplot(fgseaResTidy, aes(reorder(pathway, NES), NES)) +
geom_col(aes(fill=padj<0.05)) +
coord_flip() +
labs(x="Pathway", y="Normalized Enrichment Score",
title="Hallmark pathways NES from GSEA") +
theme_minimal()
plotEnrichment(pathways.food_allergy[["HP_FOOD_ALLERGY"]],
ranks)
plotEnrichment(pathways.allergy[["HP_FOOD_ALLERGY"]],
ranks)
knitr::opts_chunk$set(echo = TRUE)
# Load the pathways into a named list
pathways.food_int <- gmtPathways("..\\..\\gsea\\gene_sets\\HP_FOOD_INTOLERANCE.v2023.1.Hs.gmt")
# Look at them all if you want (uncomment)
pathways.food_int
# Show the first few pathways, and within those, show only the first few genes.
pathways.food_int %>%
head() %>%
lapply(head)
fgseaRes <- fgsea(pathways=pathways.food_int, stats=ranks, nperm=1000)
fgseaResTidy <- fgseaRes %>%
as_tibble() %>%
arrange(desc(NES))
# Show in a nice table:
fgseaResTidy %>%
dplyr::select(-leadingEdge, -ES, -nMoreExtreme) %>%
arrange(padj) %>%
DT::datatable()
ggplot(fgseaResTidy, aes(reorder(pathway, NES), NES)) +
geom_col(aes(fill=padj<0.05)) +
coord_flip() +
labs(x="Pathway", y="Normalized Enrichment Score",
title="Hallmark pathways NES from GSEA") +
theme_minimal()
plotEnrichment(pathways.food_int[["HP_FOOD_INTOLERANCE"]],
ranks)
plotEnrichment(pathways.allergy[["HP_FOOD_ALLERGY"]],
ranks)
git pull origin master
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
res <- read_csv("..\\..\\data\\results\\differential_gene_expression\\activ_pers_vs_followup_genomewide.csv")
knitr::opts_chunk$set(echo = TRUE)
res <- read_csv("..\\..\\data\\results\\differential_gene_expression\\activ_pers_vs_resolved_baseline_genomewide.csv")
res
res <- read_csv("..\\..\\data\\results\\differential_gene_expression\\activ_pers_vs_resolved_followup_genomewide.csv")
res
# Convert GeneID column values from numeric to character
res$GeneID <- as.character(res$GeneID)
# Map Entrez gene IDs to gene symbols
id_to_symbol <- AnnotationDbi::select(
org.Hs.eg.db, key=res$GeneID,
columns=c("SYMBOL","GENENAME"), keytype="ENTREZID"
)
# Map Entrez gene IDs to gene symbols
id_to_symbol <- AnnotationDbi::select(
org.Hs.eg.db, key=res$GeneID,
columns=c("SYMBOL","GENENAME"), keytype="ENTREZID"
)
# Join gene symbol with results table
res_symb <- inner_join(res, id_to_symbol, by=c("GeneID"="ENTREZID"))
# Map Entrez gene IDs to gene symbols
id_to_symbol <- AnnotationDbi::select(
org.Hs.eg.db, key=res$GeneID,
columns=c("SYMBOL","GENENAME"), keytype="ENTREZID"
)
library(tidyverse)
library(tidyverse)
res <- read_csv("..\\..\\data\\results\\differential_gene_expression\\activ_pers_vs_resolved_followup_genomewide.csv")
res
# Convert GeneID column values from numeric to character
res$GeneID <- as.character(res$GeneID)
# Map Entrez gene IDs to gene symbols
id_to_symbol <- AnnotationDbi::select(
org.Hs.eg.db, key=res$GeneID,
columns=c("SYMBOL","GENENAME"), keytype="ENTREZID"
)
# Load package
library(org.Hs.eg.db)
# Convert GeneID column values from numeric to character
res$GeneID <- as.character(res$GeneID)
# Map Entrez gene IDs to gene symbols
id_to_symbol <- AnnotationDbi::select(
org.Hs.eg.db, key=res$GeneID,
columns=c("SYMBOL","GENENAME"), keytype="ENTREZID"
)
id_to_symbol
# Join gene symbol with results table
res_symb <- inner_join(res, id_to_symbol, by=c("GeneID"="ENTREZID"))
res_symb
# Create table with just gene symbol and log2fold change to use for GSEA
res_simp <- res_symb %>%
dplyr::select(SYMBOL, log2FoldChange) %>%
na.omit() %>%
distinct() %>%
group_by(SYMBOL)
res_simp
# Create named vector of gene-level statistics
ranks <- deframe(res_simp)
head(ranks, 20)
# Load the pathways into a named list
pathways.food_allergy <- gmtPathways("..\\..\\gsea\\gene_sets\\HP_FOOD_ALLERGY.v2023.1.Hs.gmt")
# Install fgsea package
# if (!require("BiocManager", quietly = TRUE))
#     install.packages("BiocManager")
#
# BiocManager::install("fgsea")
library(fgsea)
# Create named vector of gene-level statistics
ranks <- deframe(res_simp)
head(ranks, 20)
# Load the pathways into a named list
pathways.food_allergy <- gmtPathways("..\\..\\gsea\\gene_sets\\HP_FOOD_ALLERGY.v2023.1.Hs.gmt")
# Look at them all if you want (uncomment)
pathways.food_allergy
# Show the first few pathways, and within those, show only the first few genes.
pathways.food_allergy %>%
head() %>%
lapply(head)
fgseaRes <- fgsea(pathways=pathways.food_allergy, stats=ranks, nperm=1000)
fgseaRes <- fgsea(pathways=pathways.food_allergy, stats=ranks)
ggplot(fgseaResTidy, aes(reorder(pathway, NES), NES)) +
geom_col(aes(fill=padj<0.05)) +
coord_flip() +
labs(x="Pathway", y="Normalized Enrichment Score",
title="Hallmark pathways NES from GSEA") +
theme_minimal()
fgseaResTidy <- fgseaRes %>%
as_tibble() %>%
arrange(desc(NES))
# Show in a nice table:
fgseaResTidy %>%
dplyr::select(-leadingEdge, -ES, -nMoreExtreme) %>%
arrange(padj) %>%
DT::datatable()
library(tidyverse)
library(dplyr)
fgseaResTidy <- fgseaRes %>%
as_tibble() %>%
arrange(desc(NES))
# Show in a nice table:
fgseaResTidy %>%
dplyr::select(-leadingEdge, -ES, -nMoreExtreme) %>%
arrange(padj) %>%
DT::datatable()
fgseaRes <- fgsea(pathways=pathways.food_allergy, stats=ranks)
fgseaResTidy <- fgseaRes %>%
as_tibble() %>%
arrange(desc(NES))
# Show in a nice table:
fgseaResTidy %>%
dplyr::select(-leadingEdge, -ES, -nMoreExtreme) %>%
arrange(padj) %>%
DT::datatable()
fgseaRes <- fgsea(pathways=pathways.food_allergy, stats=ranks, nperm=1000)
fgseaResTidy <- fgseaRes %>%
as_tibble() %>%
arrange(desc(NES))
# Show in a nice table:
fgseaResTidy %>%
dplyr::select(-leadingEdge, -ES, -nMoreExtreme) %>%
arrange(padj) %>%
DT::datatable()
fgseaRes <- fgsea(pathways=pathways.food_allergy, stats=ranks)
fgseaResTidy <- fgseaRes %>%
as_tibble() %>%
arrange(desc(NES))
# Show in a nice table:
fgseaResTidy %>%
dplyr::select(-leadingEdge, -ES, -nMoreExtreme) %>%
arrange(padj) %>%
DT::datatable()
fgseaResTidy <- fgseaRes %>%
as_tibble() %>%
arrange(desc(NES))
# Show in a nice table:
fgseaResTidy %>%
# dplyr::select(-leadingEdge, -ES, -nMoreExtreme) %>%
arrange(padj) %>%
DT::datatable()
ggplot(fgseaResTidy, aes(reorder(pathway, NES), NES)) +
geom_col(aes(fill=padj<0.05)) +
coord_flip() +
labs(x="Pathway", y="Normalized Enrichment Score",
title="Hallmark pathways NES from GSEA") +
theme_minimal()
plotEnrichment(pathways.food_allergy[["HP_FOOD_ALLERGY"]],
ranks)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(dplyr)
res <- read_csv("..\\..\\data\\results\\differential_gene_expression\\activ_pers_vs_resolved_followup_genomewide.csv")
res
# Load package
library(org.Hs.eg.db)
# Convert GeneID column values from numeric to character
res$GeneID <- as.character(res$GeneID)
# Map Entrez gene IDs to gene symbols
id_to_symbol <- AnnotationDbi::select(
org.Hs.eg.db, key=res$GeneID,
columns=c("SYMBOL","GENENAME"), keytype="ENTREZID"
)
id_to_symbol
# Join gene symbol with results table
res_symb <- inner_join(res, id_to_symbol, by=c("GeneID"="ENTREZID"))
res_symb
# Create table with just gene symbol and log2fold change to use for GSEA
res_simp <- res_symb %>%
dplyr::select(SYMBOL, log2FoldChange) %>%
na.omit() %>%
distinct() %>%
group_by(SYMBOL)
res_simp
# Install fgsea package
# if (!require("BiocManager", quietly = TRUE))
#     install.packages("BiocManager")
#
# BiocManager::install("fgsea")
library(fgsea)
# Create named vector of gene-level statistics
ranks <- deframe(res_simp)
head(ranks, 20)
# Load the pathways into a named list
pathways.allergy <- gmtPathways("..\\..\\gsea\\gene_sets\\HP_ALLERGY.v2023.1.Hs.gmt")
# Look at them all if you want (uncomment)
pathways.allergy
# Show the first few pathways, and within those, show only the first few genes.
pathways.allergy %>%
head() %>%
lapply(head)
fgseaRes <- fgsea(pathways=pathways.food_allergy, stats=ranks)
fgseaResTidy <- fgseaRes %>%
as_tibble() %>%
arrange(desc(NES))
# Show in a nice table:
fgseaResTidy %>%
# dplyr::select(-leadingEdge, -ES, -nMoreExtreme) %>%
arrange(padj) %>%
DT::datatable()
ggplot(fgseaResTidy, aes(reorder(pathway, NES), NES)) +
geom_col(aes(fill=padj<0.05)) +
coord_flip() +
labs(x="Pathway", y="Normalized Enrichment Score",
title="Hallmark pathways NES from GSEA") +
theme_minimal()
plotEnrichment(pathways.food_allergy[["HP_FOOD_ALLERGY"]],
ranks)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(dplyr)
res <- read_csv("..\\..\\data\\results\\differential_gene_expression\\activ_pers_vs_resolved_followup_genomewide.csv")
res
# Load package
library(org.Hs.eg.db)
# Convert GeneID column values from numeric to character
res$GeneID <- as.character(res$GeneID)
# Map Entrez gene IDs to gene symbols
id_to_symbol <- AnnotationDbi::select(
org.Hs.eg.db, key=res$GeneID,
columns=c("SYMBOL","GENENAME"), keytype="ENTREZID"
)
id_to_symbol
# Join gene symbol with results table
res_symb <- inner_join(res, id_to_symbol, by=c("GeneID"="ENTREZID"))
res_symb
# Create table with just gene symbol and log2fold change to use for GSEA
res_simp <- res_symb %>%
dplyr::select(SYMBOL, log2FoldChange) %>%
na.omit() %>%
distinct() %>%
group_by(SYMBOL)
res_simp
# Install fgsea package
# if (!require("BiocManager", quietly = TRUE))
#     install.packages("BiocManager")
#
# BiocManager::install("fgsea")
library(fgsea)
# Create named vector of gene-level statistics
ranks <- deframe(res_simp)
head(ranks, 20)
# Load the pathways into a named list
pathways.food_int <- gmtPathways("..\\..\\gsea\\gene_sets\\HP_FOOD_INTOLERANCE.v2023.1.Hs.gmt")
# Look at them all if you want (uncomment)
pathways.food_int
# Show the first few pathways, and within those, show only the first few genes.
pathways.food_int %>%
head() %>%
lapply(head)
fgseaRes <- fgsea(pathways=pathways.food_allergy, stats=ranks)
fgseaResTidy <- fgseaRes %>%
as_tibble() %>%
arrange(desc(NES))
# Show in a nice table:
fgseaResTidy %>%
# dplyr::select(-leadingEdge, -ES, -nMoreExtreme) %>%
arrange(padj) %>%
DT::datatable()
fgseaRes <- fgsea(pathways=pathways.food_int, stats=ranks)
fgseaResTidy <- fgseaRes %>%
as_tibble() %>%
arrange(desc(NES))
# Show in a nice table:
fgseaResTidy %>%
# dplyr::select(-leadingEdge, -ES, -nMoreExtreme) %>%
arrange(padj) %>%
DT::datatable()
ggplot(fgseaResTidy, aes(reorder(pathway, NES), NES)) +
geom_col(aes(fill=padj<0.05)) +
coord_flip() +
labs(x="Pathway", y="Normalized Enrichment Score",
title="Hallmark pathways NES from GSEA") +
theme_minimal()
plotEnrichment(pathways.food_int[["HP_FOOD_INTOLERANCE"]],
ranks)
fgseaRes <- fgsea(pathways=pathways.allergy, stats=ranks)
fgseaResTidy <- fgseaRes %>%
as_tibble() %>%
arrange(desc(NES))
# Show in a nice table:
fgseaResTidy %>%
# dplyr::select(-leadingEdge, -ES, -nMoreExtreme) %>%
arrange(padj) %>%
DT::datatable()
ggplot(fgseaResTidy, aes(reorder(pathway, NES), NES)) +
geom_col(aes(fill=padj<0.05)) +
coord_flip() +
labs(x="Pathway", y="Normalized Enrichment Score",
title="Hallmark pathways NES from GSEA") +
theme_minimal()
plotEnrichment(pathways.allergy[["HP_ALLERGY"]],
ranks)
knitr::opts_chunk$set(echo = TRUE)
res <- read_csv("..\\..\\data\\results\\differential_gene_expression\\activ_pers_vs_resolved_baseline_genomewide.csv")
res
# Convert GeneID column values from numeric to character
res$GeneID <- as.character(res$GeneID)
# Map Entrez gene IDs to gene symbols
id_to_symbol <- AnnotationDbi::select(
org.Hs.eg.db, key=res$GeneID,
columns=c("SYMBOL","GENENAME"), keytype="ENTREZID"
)
id_to_symbol
study_gene_list <- read.table("..\\..\\data\\raw\\study_gene_list.txt")
View(study_gene_list)
study_gene_list_symb
# study_gene_list_symb
source("~/.active-rstudio-document", echo=TRUE)
# Convert GeneID column values from numeric to character
key=study_gene_list$V1 <- as.character(key=study_gene_list$V1)
# Convert GeneID column values from numeric to character
study_gene_list$V1 <- as.character(study_gene_list$V1)
# study_gene_list_symb
# Convert GeneID column values from numeric to character
study_gene_list$V1 <- as.character(study_gene_list$V1)
>>>>>>> Stashed changes
