library( "DESeq2" )
#countData <- read.table(file = '/Users/Amanda Chan/Documents/440 Project/Dataset/GSE114065_raw_counts_GRCh38.p13_NCBI.tsv', sep = '\t', header = TRUE)
countData <- read.table(file = '..\\..\\data\\raw\\GSE114065_raw_counts_GRCh38.p13_NCBI.tsv', sep = '\t', header = TRUE) # file path: ..\\..\\ goes up two folders
View(countData)
metaData <- read.csv('..\\..\\data\\raw\\GSE114065_series_matrix.csv', header = TRUE, sep = ",")
# countData <- read.table(file = '..\\..\\data\\raw\\GSE114065_raw_counts_GRCh38.p13_NCBI.tsv', sep = '\t', header = TRUE) # file path: ..\\..\\ goes up two folders
metaData
# Select Sample_geo_accession (1), Sample_characteristics_ch1_age_yrs (10), Sample_characteristics_ch1_allergy_status (13), and Sample_characteristics_ch1_activation_status (14) rows
coldata <- metaData[c("1", "10", "13", "14"),]
coldata
coldata_transpose <- t(coldata)
# Remove rows 1 and 2
coldata_transpose_2 <- coldata_transpose[-c(1, 2),]
# Rename columns
colnames(coldata_transpose_2) <- c("geo_accession", "age", "allergy_status","activation_status")
# Rename rows to GEO accession names
rownames(coldata_transpose_2) <- coldata_transpose_2[,1]
# Delete column 1 since GEO accession names are now row names
coldata_transpose_3 <- coldata_transpose_2[,-1]
# coldata_transpose_3
# Load dplyr package
library(dplyr)
# Create new metadata table with only samples from the follow-up timepoint (age 2 or 4)
follow_up_coldata <- filter(coldata_transpose_3, age == '2')
# create new datatype with correct format
test_coldata_df <- data.frame(
age = as.vector(coldata_transpose_3[,1]),
allergy_status = as.vector(coldata_transpose_3[,2]),
activation_status = as.vector(coldata_transpose_3[,3]),
row.names = row.names(coldata_transpose_3)
)
test_coldata_df
View(test_coldata_df)
# Create new metadata table with only samples from the follow-up timepoint (age 2 or 4)
follow_up_coldata <- filter(test_coldata_df, age %in% c("2", "4"))
# filter(df, state %in% c("CA", "NY",'DE'))
# Of the follow-up timepoint data, separate into activated and unactivated
follow_up_act_coldata <- filter(follow_up_coldata, activation_status == "1")
# Get sample names of samples at the follow-up timepoint
# sample_label_follow_up <- row.names(follow_up_coldata)
sample_label_follow_up_act <- row.names(follow_up_act_coldata)
# Create new dataframe with only data samples from the follow-up timepoint (age 2 or 4)
# follow_up_countData <- countData[,c("GeneID", sample_label_follow_up)]
follow_up_act_countData <- countData[,c("GeneID", sample_label_follow_up_act)]
View(follow_up_act_countData)
# Load matrix containing genes that were identified as differentially expressed between allergics and controls at baseline timepoint by the authors
deg_allerg_vs_ctrl <- read.csv('..\\..\\data\\raw\\supp_data_3_dge_activ_allerg_vs_ctrl_baseline.xlsx', header = TRUE, sep = ",")
# Filter genes based on genes that were identified as differentially expressed between allergics and controls at baseline timepoint
# follow_up_act_countData_filt_genes <-
View(deg_allerg_vs_ctrl)
# Load matrix containing genes that were identified as differentially expressed between allergics and controls at baseline timepoint by the authors
deg_allerg_vs_ctrl <- read.csv('..\\..\\data\\raw\\supp_data_3_dge_activ_allerg_vs_ctrl_baseline.csv', header = TRUE, sep = ",")
# Filter genes based on genes that were identified as differentially expressed between allergics and controls at baseline timepoint
# follow_up_act_countData_filt_genes <-
# Load matrix containing genes that were identified as differentially expressed between allergics and controls at baseline timepoint by the authors
deg_allerg_vs_ctrl <- read.csv('..\\..\\data\\raw\\supp_data_3_dge_activ_allerg_vs_ctrl_baseline.csv', header = TRUE, sep = ",")
# Get GeneID of differentially expressed genes
geneid_deg_allerg_vs_ctrl <- deg_allerg_vs_ctrl[,2:-1]
# Load matrix containing genes that were identified as differentially expressed between allergics and controls at baseline timepoint by the authors
deg_allerg_vs_ctrl <- read.csv('..\\..\\data\\raw\\supp_data_3_dge_activ_allerg_vs_ctrl_baseline.csv', header = TRUE, sep = ",")
# Get GeneID of differentially expressed genes
geneid_deg_allerg_vs_ctrl <- deg_allerg_vs_ctrl[,2:1413]
# Load matrix containing genes that were identified as differentially expressed between allergics and controls at baseline timepoint by the authors
deg_allerg_vs_ctrl <- read.csv('..\\..\\data\\raw\\supp_data_3_dge_activ_allerg_vs_ctrl_baseline.csv', header = TRUE, sep = ",")
# Get GeneID of differentially expressed genes
geneid_deg_allerg_vs_ctrl <- deg_allerg_vs_ctrl[2,2:1413]
# Load matrix containing genes that were identified as differentially expressed between allergics and controls at baseline timepoint by the authors
deg_allerg_vs_ctrl <- read.csv('..\\..\\data\\raw\\supp_data_3_dge_activ_allerg_vs_ctrl_baseline.csv', header = TRUE, sep = ",")
# Get GeneID of differentially expressed genes
geneid_deg_allerg_vs_ctrl <- deg_allerg_vs_ctrl[2, 2:1413]
# Load matrix containing genes that were identified as differentially expressed between allergics and controls at baseline timepoint by the authors
deg_allerg_vs_ctrl <- read.csv('..\\..\\data\\raw\\supp_data_3_dge_activ_allerg_vs_ctrl_baseline.csv', header = TRUE, sep = ",")
# Get GeneID of differentially expressed genes
geneid_deg_allerg_vs_ctrl <- deg_allerg_vs_ctrl[2:1413, 2]
# Filter genes based on genes that were identified as differentially expressed between allergics and controls at baseline timepoint
# follow_up_act_countData_filt_genes <-
geneid_deg_allerg_vs_ctrl
# Load matrix containing genes that were identified as differentially expressed between allergics and controls at baseline timepoint by the authors
deg_allerg_vs_ctrl <- read.csv('..\\..\\data\\raw\\supp_data_3_dge_activ_allerg_vs_ctrl_baseline.csv', header = TRUE, sep = ",")
# Get GeneID of differentially expressed genes
geneid_deg_allerg_vs_ctrl <- deg_allerg_vs_ctrl[2:1413, 2]
# Filter genes based on genes that were identified as differentially expressed between allergics and controls at baseline timepoint
follow_up_act_countData_filt_genes <- follow_up_act_countData[geneid_deg_allerg_vs_ctrl,]
View(follow_up_act_countData_filt_genes)
# Load matrix containing genes that were identified as differentially expressed between allergics and controls at baseline timepoint by the authors
deg_allerg_vs_ctrl <- read.csv('..\\..\\data\\raw\\supp_data_3_dge_activ_allerg_vs_ctrl_baseline.csv', header = TRUE, sep = ",")
# Get GeneID of differentially expressed genes
geneid_deg_allerg_vs_ctrl <- deg_allerg_vs_ctrl[2:1413, 2]
# Filter genes based on genes that were identified as differentially expressed between allergics and controls at baseline timepoint
follow_up_act_countData_filt_genes <- filter(follow_up_act_countData, GeneID == geneid_deg_allerg_vs_ctrl)
# Load matrix containing genes that were identified as differentially expressed between allergics and controls at baseline timepoint by the authors
deg_allerg_vs_ctrl <- read.csv('..\\..\\data\\raw\\supp_data_3_dge_activ_allerg_vs_ctrl_baseline.csv', header = TRUE, sep = ",")
# Get GeneID of differentially expressed genes
geneid_deg_allerg_vs_ctrl <- deg_allerg_vs_ctrl[2:1413, 2]
# Filter genes based on genes that were identified as differentially expressed between allergics and controls at baseline timepoint
follow_up_act_countData_filt_genes <- filter(follow_up_act_countData, GeneID %in% geneid_deg_allerg_vs_ctrl)
#
# filter(my_first_df,
#                        SampleID %in% sample_ids$SampleID)
View(coldata_transpose_2)
geneid_deg_allerg_vs_ctrl
View(follow_up_act_coldata)
dds <- DESeqDataSetFromMatrix(countData=follow_up_act_countData_filt_genes,
colData=follow_up_act_coldata,
design=~allergy_status, tidy = TRUE)
dds
dds <- DESeq(dds)
# Look at results table
res <- results(dds)
head(results(dds, tidy=TRUE))
# Summary of results
summary(res) #summary of results
# Sort summary list by p-value
res <- res[order(res$padj),]
head(res)
# How many adjusted p-values are less than 0.1 (the default alpha)
sum(res$padj < 0.1, na.rm=TRUE)
# How many p-values are less than 0.05
sum(res$pvalue < 0.05, na.rm=TRUE)
#we can use plotCounts fxn to compare the normalized counts
#between treated and control groups for our top 6 genes
par(mfrow=c(2,3))
plotCounts(dds, gene="9341", intgroup="allergy_status")
plotCounts(dds, gene="6518", intgroup="allergy_status")
plotCounts(dds, gene="26232", intgroup="allergy_status")
plotCounts(dds, gene="7799", intgroup="allergy_status")
plotCounts(dds, gene="23352", intgroup="allergy_status")
plotCounts(dds, gene="3925", intgroup="allergy_status")
#reset par
par(mfrow=c(1,1))
# Make a basic volcano plot
with(res, plot(log2FoldChange, -log10(pvalue), pch=20, main="Volcano plot", xlim=c(-3,3)))
# Add colored points: blue if padj<0.01, red if log2FC>1 and padj<0.05)
with(subset(res, padj<.01 ), points(log2FoldChange, -log10(pvalue), pch=20, col="blue"))
with(subset(res, padj<.01 & abs(log2FoldChange)>2), points(log2FoldChange, -log10(pvalue), pch=20, col="red"))
#First we need to transform the raw count data
#vst function will perform variance stabilizing transformation
vsdata <- vst(dds, blind=FALSE)
plotPCA(vsdata, intgroup="allergy_status") # use the DESEQ2 plotPCA fxn
View(res)
# Install packages and load libraries
install.packages("htmltools")
library(htmltools)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("DESeq2")
# Install packages and load libraries
install.packages("htmltools")
library(htmltools)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("DESeq2")
# Install packages and load libraries
# install.packages("htmltools")
library(htmltools)
# if (!require("BiocManager", quietly = TRUE))
#      install.packages("BiocManager")
#
#  BiocManager::install("DESeq2")
library( "DESeq2" )
library(ggplot2)
# Read in raw counts matrix
# library(readr)
# df <- read_tsv("C:\Users\Amanda Chan\Documents\440 Project\Dataset\GSE114065_raw_counts_GRCh38.p13_NCBI.tsv.gz")
# Unzips gz file and writes over with unzipped version
# R.utils::gunzip("/Users/Amanda Chan/Documents/440 Project/Dataset/GSE114065_raw_counts_GRCh38.p13_NCBI.tsv.gz")
#countData <- read.table(file = '/Users/Amanda Chan/Documents/440 Project/Dataset/GSE114065_raw_counts_GRCh38.p13_NCBI.tsv', sep = '\t', header = TRUE)
countData <- read.table(file = '..\\..\\data\\raw\\GSE114065_raw_counts_GRCh38.p13_NCBI.tsv', sep = '\t', header = TRUE) # file path: ..\\..\\ goes up two folders
head(countData)
# Unzip Human Gene Annotation Table gz file and write over with unzipped version
# R.utils::gunzip("/Users/Amanda Chan/Documents/440 Project/Dataset/Human.GRCh38.p13.annot.tsv.gz")
# Unzip metadata gz file and write over with unzipped version
# R.utils::gunzip("/Users/Amanda Chan/Documents/440 Project/Dataset/GSE114065_series_matrix.txt.gz")
metaData <- read.csv('..\\..\\data\\raw\\GSE114065_series_matrix.csv', header = TRUE, sep = ",")
# countData <- read.table(file = '..\\..\\data\\raw\\GSE114065_raw_counts_GRCh38.p13_NCBI.tsv', sep = '\t', header = TRUE) # file path: ..\\..\\ goes up two folders
metaData
# Select Sample_geo_accession (1), Sample_characteristics_ch1_age_yrs (10), Sample_characteristics_ch1_allergy_status (13), and Sample_characteristics_ch1_activation_status (14) rows
coldata <- metaData[c("1", "10", "13", "14"),]
coldata
coldata_transpose <- t(coldata)
# Remove rows 1 and 2
coldata_transpose_2 <- coldata_transpose[-c(1, 2),]
# Rename columns
colnames(coldata_transpose_2) <- c("geo_accession", "age", "allergy_status","activation_status")
# Rename rows to GEO accession names
rownames(coldata_transpose_2) <- coldata_transpose_2[,1]
# Delete column 1 since GEO accession names are now row names
coldata_transpose_3 <- coldata_transpose_2[,-1]
# coldata_transpose_3
# Load dplyr package
library(dplyr)
# Create new metadata table with only samples from the follow-up timepoint (age 2 or 4)
# follow_up_coldata <- filter(coldata_transpose_3, age == '2')
test_coldata_df <- data.frame(
age = as.vector(coldata_transpose_3[,1]),
allergy_status = as.vector(coldata_transpose_3[,2]),
activation_status = as.vector(coldata_transpose_3[,3]),
row.names = row.names(coldata_transpose_3)
)
test_coldata_df
# Create new metadata table with only samples from the follow-up timepoint (age 2 or 4)
follow_up_coldata <- filter(test_coldata_df, age %in% c("2", "4"))
# filter(df, state %in% c("CA", "NY",'DE'))
# Of the follow-up timepoint data, separate into activated and unactivated
follow_up_act_coldata <- filter(follow_up_coldata, activation_status == "1")
# Get sample names of samples at the follow-up timepoint
# sample_label_follow_up <- row.names(follow_up_coldata)
sample_label_follow_up_act <- row.names(follow_up_act_coldata)
# Create new dataframe with only data samples from the follow-up timepoint (age 2 or 4)
# follow_up_countData <- countData[,c("GeneID", sample_label_follow_up)]
follow_up_act_countData <- countData[,c("GeneID", sample_label_follow_up_act)]
dds <- DESeqDataSetFromMatrix(countData=follow_up_act_countData,
colData=follow_up_act_coldata,
design=~allergy_status, tidy = TRUE)
dds
dds <- DESeq(dds)
# Look at results table
res <- results(dds)
head(results(dds, tidy=TRUE))
# Summary of results
summary(res) #summary of results
# Sort summary list by p-value
res <- res[order(res$padj),]
head(res)
# How many adjusted p-values are less than 0.1 (the default alpha)
sum(res$padj < 0.1, na.rm=TRUE)
# How many p-values are less than 0.05
sum(res$pvalue < 0.05, na.rm=TRUE)
#we can use plotCounts fxn to compare the normalized counts
#between treated and control groups for our top 6 genes
par(mfrow=c(2,3))
plotCounts(dds, gene="7476", intgroup="allergy_status")
plotCounts(dds, gene="10235", intgroup="allergy_status")
plotCounts(dds, gene="105374981", intgroup="allergy_status")
plotCounts(dds, gene="348", intgroup="allergy_status")
plotCounts(dds, gene="255928", intgroup="allergy_status")
plotCounts(dds, gene="222545", intgroup="allergy_status")
#reset par
par(mfrow=c(1,1))
# Make a basic volcano plot
with(res, plot(log2FoldChange, -log10(pvalue), pch=20, main="Volcano plot", xlim=c(-4,4)))
# Add colored points: blue if padj<0.01, red if log2FC>1 and padj<0.05)
with(subset(res, padj<.01 ), points(log2FoldChange, -log10(pvalue), pch=20, col="blue"))
with(subset(res, padj<.01 & abs(log2FoldChange)>2), points(log2FoldChange, -log10(pvalue), pch=20, col="red"))
#First we need to transform the raw count data
#vst function will perform variance stabilizing transformation
vsdata <- vst(dds, blind=FALSE)
plotPCA(vsdata, intgroup="allergy_status") # use the DESEQ2 plotPCA fxn
#reset par
par(mfrow=c(1,1))
# Make a basic volcano plot
with(res, plot(log2FoldChange, -log10(pvalue), pch=20, main="Volcano plot", xlim=c(-8,4)))
# Add colored points: blue if padj<0.01, red if log2FC>1 and padj<0.05)
with(subset(res, padj<.01 ), points(log2FoldChange, -log10(pvalue), pch=20, col="blue"))
with(subset(res, padj<.01 & abs(log2FoldChange)>2), points(log2FoldChange, -log10(pvalue), pch=20, col="red"))
#reset par
par(mfrow=c(1,1))
# Make a basic volcano plot
with(res, plot(log2FoldChange, -log10(pvalue), pch=20, main="Volcano plot", xlim=c(-8,6)))
# Add colored points: blue if padj<0.01, red if log2FC>1 and padj<0.05)
with(subset(res, padj<.01 ), points(log2FoldChange, -log10(pvalue), pch=20, col="blue"))
with(subset(res, padj<.01 & abs(log2FoldChange)>2), points(log2FoldChange, -log10(pvalue), pch=20, col="red"))
#reset par
par(mfrow=c(1,1))
# Make a basic volcano plot
with(res, plot(log2FoldChange, -log10(pvalue), pch=20, main="Volcano plot", xlim=c(-8,6), yljim=c(0,10)))
# Add colored points: blue if padj<0.01, red if log2FC>1 and padj<0.05)
with(subset(res, padj<.01 ), points(log2FoldChange, -log10(pvalue), pch=20, col="blue"))
with(subset(res, padj<.01 & abs(log2FoldChange)>2), points(log2FoldChange, -log10(pvalue), pch=20, col="red"))
#reset par
par(mfrow=c(1,1))
# Make a basic volcano plot
with(res, plot(log2FoldChange, -log10(pvalue), pch=20, main="Volcano plot", xlim=c(-8,6), ylim=c(0,10)))
# Add colored points: blue if padj<0.01, red if log2FC>1 and padj<0.05)
with(subset(res, padj<.01 ), points(log2FoldChange, -log10(pvalue), pch=20, col="blue"))
with(subset(res, padj<.01 & abs(log2FoldChange)>2), points(log2FoldChange, -log10(pvalue), pch=20, col="red"))
#reset par
par(mfrow=c(1,1))
# Make a basic volcano plot
with(res, plot(log2FoldChange, -log10(pvalue), pch=20, main="Volcano plot", xlim=c(-8,6))
# Add colored points: blue if padj<0.01, red if log2FC>1 and padj<0.05)
with(subset(res, padj<.01 ), points(log2FoldChange, -log10(pvalue), pch=20, col="blue"))
#reset par
par(mfrow=c(1,1))
# Make a basic volcano plot
with(res, plot(log2FoldChange, -log10(pvalue), pch=20, main="Volcano plot", xlim=c(-8,6))
# Add colored points: blue if padj<0.01, red if log2FC>1 and padj<0.05)
with(subset(res, padj<.01 ), points(log2FoldChange, -log10(pvalue), pch=20, col="blue"))
#reset par
par(mfrow=c(1,1))
# Make a basic volcano plot
with(res, plot(log2FoldChange, -log10(pvalue), pch=20, main="Volcano plot", xlim=c(-8,6)))
# Add colored points: blue if padj<0.01, red if log2FC>1 and padj<0.05)
with(subset(res, padj<.01 ), points(log2FoldChange, -log10(pvalue), pch=20, col="blue"))
with(subset(res, padj<.01 & abs(log2FoldChange)>2), points(log2FoldChange, -log10(pvalue), pch=20, col="red"))
